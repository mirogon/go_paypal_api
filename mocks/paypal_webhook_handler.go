// Code generated by MockGen. DO NOT EDIT.
// Source: paypal_webhook_handler.go

// Package mock_paypal_api is a generated GoMock package.
package mock_paypal_api

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	http_ "github.com/mirogon/go_http"
	paypal_api "github.com/mirogon/go_paypal_api"
)

// MockPaypalWebhookHandler is a mock of PaypalWebhookHandler interface.
type MockPaypalWebhookHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPaypalWebhookHandlerMockRecorder
}

// MockPaypalWebhookHandlerMockRecorder is the mock recorder for MockPaypalWebhookHandler.
type MockPaypalWebhookHandlerMockRecorder struct {
	mock *MockPaypalWebhookHandler
}

// NewMockPaypalWebhookHandler creates a new mock instance.
func NewMockPaypalWebhookHandler(ctrl *gomock.Controller) *MockPaypalWebhookHandler {
	mock := &MockPaypalWebhookHandler{ctrl: ctrl}
	mock.recorder = &MockPaypalWebhookHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaypalWebhookHandler) EXPECT() *MockPaypalWebhookHandlerMockRecorder {
	return m.recorder
}

// HandlePaypalWebhooks mocks base method.
func (m *MockPaypalWebhookHandler) HandlePaypalWebhooks(responseWriter http_.HttpResponseWriter, req *http.Request) (paypal_api.WebhookNotification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePaypalWebhooks", responseWriter, req)
	ret0, _ := ret[0].(paypal_api.WebhookNotification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandlePaypalWebhooks indicates an expected call of HandlePaypalWebhooks.
func (mr *MockPaypalWebhookHandlerMockRecorder) HandlePaypalWebhooks(responseWriter, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePaypalWebhooks", reflect.TypeOf((*MockPaypalWebhookHandler)(nil).HandlePaypalWebhooks), responseWriter, req)
}
